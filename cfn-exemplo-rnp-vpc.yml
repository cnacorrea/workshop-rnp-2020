---
AWSTemplateFormatVersion: 2010-09-09
Description: Exemplo simples de infraestrutura como codigo.
Metadata:
  Authors:
    Description: Carlos Correa (carlos@xtbsolutions.com)
  License: MIT
Parameters:
  VpcName:
    Description: VPC name
    Type: String
    ConstraintDescription: Must be a valid VPC name.
    Default: "cfn-exemplo-rnp-vpc"
  KeyName:
    Description: Key pair
    Type: String
    ConstraintDescription: Key pair used for NAT instance access.
    Default: "carlos-key"
  SourceCidr:
    Type: String
    Description: IP range for SSH
    ConstraintDescription: Must be a valid IP/netmask entry.
    Default: 0.0.0.0/0
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.17.0.0/16
      EnableDnsSupport: 'True'
      EnableDnsHostnames: 'True'
      Tags:
      - Key: Name
        Value: !Ref VpcName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref VpcName
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: RouteTablePublic
  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: RouteTablePrivate1
  RouteTablePrivate2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: RouteTablePrivate2

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.17.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PublicSubnet1
  RouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublic
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.17.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PublicSubnet2
  RouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublic

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.17.128.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PrivateSubnet1
  RouteTableAssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref RouteTablePrivate1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 172.17.129.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
      - Key: vpc_name
        Value: !Ref VpcName
      - Key: Name
        Value: PrivateSubnet2
  RouteTableAssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref RouteTablePrivate2

  NATGW1Address:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref NATGW1Instance
  NATGW2Address:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref NATGW2Instance

  NATGWSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Manage access to the private subnet gateways
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 172.16.0.0/12
        IpProtocol: "-1"

  NATGW1Iface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      Description: NIC for the private subnet 1 gateway
      GroupSet:
      - !Ref NATGWSecurityGroup
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: NATGW1Iface
  NATGW2Iface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet2
      Description: NIC for the private subnet 2 gateway
      GroupSet:
      - !Ref NATGWSecurityGroup
      SourceDestCheck: false
      Tags:
        -
          Key: Name
          Value: NATGW2Iface

  NATGW1Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
                 verbose=true
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NATGW1Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource NATGW1Instance --region us-east-1
                runas=root              
            /etc/sysctl.d/99-VPNinstance.conf:
              content: !Sub |
                net.ipv4.ip_forward = 1
              mode: "000644"
              owner: "root"
              group: "root"
            /usr/local/sbin/firewall.sh:
              content: !Sub |
                #!/bin/bash

                /sbin/iptables -t nat -X
                /sbin/iptables -X
                /sbin/iptables -t nat -F
                /sbin/iptables -F

                # evita load balancer
                /sbin/iptables -t nat -A PREROUTING -i eth0 -p tcp \! -s 172.16.0.0/12 --dport 80 -j DNAT --to 172.17.128.31

                /sbin/iptables -t nat -A POSTROUTING -d 10.0.0.0/8 -j ACCEPT
                /sbin/iptables -t nat -A POSTROUTING -d 172.16.0.0/12 -j ACCEPT
                /sbin/iptables -t nat -A POSTROUTING -d 192.168.0.0/16 -j ACCEPT
                /sbin/iptables -t nat -A POSTROUTING \! -o lo -j MASQUERADE
              mode: "000755"
              owner: "root"
              group: "root"
            /etc/crontab:
              content: !Sub |
                */5 * * * * root /usr/local/sbin/firewall.sh
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t3a.nano
      KeyName: !Ref KeyName
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref NATGW1Iface
          DeviceIndex: 0
      Tags:
        -
          Key: Name
          Value: NATGW1Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update

          yum install aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource NATGW1Instance --region us-east-1
          systemctl start cfn-hup
          systemctl enable cfn-hup
          /usr/local/sbin/firewall.sh
          sysctl --system
  NATGW2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
                 verbose=true
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NATGW1Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource NATGW2Instance --region us-east-1
                runas=root              
            /etc/sysctl.d/99-VPNinstance.conf:
              content: !Sub |
                net.ipv4.ip_forward = 1
              mode: "000644"
              owner: "root"
              group: "root"
            /usr/local/sbin/firewall.sh:
              content: !Sub |
                #!/bin/bash

                /sbin/iptables -t nat -X
                /sbin/iptables -X
                /sbin/iptables -t nat -F
                /sbin/iptables -F

                # evita load balancer
                /sbin/iptables -t nat -A PREROUTING -i eth0 -p tcp \! -s 172.16.0.0/12 --dport 80 -j DNAT --to 172.17.128.31

                /sbin/iptables -t nat -A POSTROUTING -d 10.0.0.0/8 -j ACCEPT
                /sbin/iptables -t nat -A POSTROUTING -d 172.16.0.0/12 -j ACCEPT
                /sbin/iptables -t nat -A POSTROUTING -d 192.168.0.0/16 -j ACCEPT
                /sbin/iptables -t nat -A POSTROUTING \! -o lo -j MASQUERADE
              mode: "000755"
              owner: "root"
              group: "root"
            /etc/crontab:
              content: !Sub |
                */5 * * * * root /usr/local/sbin/firewall.sh
              mode: "000644"
              owner: "root"
              group: "root"
    Properties:
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t3a.nano
      KeyName: !Ref KeyName
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref NATGW2Iface
          DeviceIndex: 0
      Tags:
        -
          Key: Name
          Value: NATGW2Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update

          yum install aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource NATGW2Instance --region us-east-1
          systemctl start cfn-hup
          systemctl enable cfn-hup
          /usr/local/sbin/firewall.sh
          sysctl --system

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate1
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId:
        Ref: NATGW1Iface
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate2
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId:
        Ref: NATGW2Iface

Outputs:
## O que queremos exportar para o mundo
  Vpc:
    Description: ID for the VPC
    Value: !Ref Vpc
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Vpc"
  PublicSubnet1:
    Description: ID for Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Description: ID for Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2"
  PrivateSubnet1:
    Description: ID for Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Description: ID for Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2"
  NATGW1Address:
    Description: Public IP address for the Private Subnet 1 gateway
    Value: !Ref NATGW1Address
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NATGW1Address"
  NATGW2Address:
    Description: Public IP address for the Private Subnet 2 gateway
    Value: !Ref NATGW2Address
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NATGW2Address"